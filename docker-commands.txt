# Construir la imagen

docker build -t sebasttti0716/grupo5-microservice:{version} .

# Ejecutar el contenedor con variable de entorno

docker run -d --name grupo5-ms-container -p 8080:8080 -e POD_NAME=grupo5-pod sebasttti0716/grupo5-microservice:{version}

# Crear tag de la imagen en docker hub

docker tag grupo5-microservice:latest sebasttti0716/grupo5-microservice:latest

# subir imagen a docker hub

docker push sebasttti0716/grupo5-microservice:latest

# Ver nodo en kubernets

kubectl get nodes

# Ver pods en kuberenets

kubectl get pods

# Aplicar el deployment en kubernetes

kubectl apply -f src/main/resources/k8s/deployment.yaml

#Aplicar el service en kubernetes

kubectl apply -f src/main/resources/k8s/service.yaml

#Obtener la ip externa a partir del service

kubectl get svc

# Agregar el repositorio oficial de NGINX Ingress

helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

# Actualizar los repositorios para que Helm descargue la lista más reciente de charts

helm repo update

# Instalar el Ingress Controller en tu cluster

helm install ingress-nginx ingress-nginx/ingress-nginx

# ver si ngnix quedó correctamente desplegado:

kubectl get pods -n default

#Argo

## Crear el namespace de Argo

kubectl create namespace argocd

## Instalar ARgo CD via manifest

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

## Verificar que los pods esten corriendo

kubectl get pods -n argocd

kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

kubectl edit svc argocd-server -n argocd

## Exponer la interfaz de Argo

kubectl get svc -n argocd

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode

## Obtener la contraseña inicial del admin

# Jenkins

## Crear grupo de trabajo

kubectl create namespace jenkins
